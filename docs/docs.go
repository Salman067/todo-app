// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate =`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a server for fullstack-examination-2024.",
    "title": "fullstack-examination-2024 API",
    "contact": {},
    "license": {
      "name": "Apache 2.0"
    },
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/api/v1",
  "paths": {
    "/healthz": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/handler.ResponseData"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/todos": {
      "get": {
        "tags": [
          "todos"
        ],
        "summary": "Find all todos with pagination and parameters for global searching........",
        "parameters": [
          {
            "name": "key_word",
            "in": "query",
            "description": "Filter todos by task name, task Description, task priority, and task status",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of todos per page",
            "required": false,
            "type": "integer",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/handler.ResponseData"
                },
                {
                  "type": "object",
                  "properties": {
                    "Data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.Todo"
                      }
                    }
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "todos"
        ],
        "summary": "Create a new todo",
        "parameters": [
          {
            "description": "json",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/handler.ResponseError"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/model.Todo"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          }
        }
      }
    },
     "/todos/withoutPagination": {
      "get": {
        "tags": [
          "todos"
        ],
        "summary": "Find all todos without pagination for broad viewing on the ui",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/handler.ResponseData"
                },
                {
                  "type": "object",
                  "properties": {
                    "Data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.Todo"
                      }
                    }
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          }
        }
      }
    },
     "/todos/status": {
      "get": {
        "tags": [
          "todos"
        ],
        "summary": "Find all todos filtering by status with pagination and parameters for global searching...",
        "parameters": [
                  {
            "name": "key_word",
            "in": "query",
            "description": "Filter todos by task name, task Description, task priority, and task status",
            "required": false,
            "type": "string"
          },
            {"name": "status",
            "in": "query",
            "description": "Filter todos by task status",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of todos per page",
            "required": false,
            "type": "integer",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/handler.ResponseData"
                },
                {
                  "type": "object",
                  "properties": {
                    "Data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.Todo"
                      }
                    }
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          }
        }
      }
    },
    "/todos/{id}": {
      "get": {
        "tags": [
          "todos"
        ],
        "summary": "Find a todo",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/handler.ResponseData"
                },
                {
                  "type": "object",
                  "properties": {
                    "Data": {
                      "$ref": "#/definitions/model.Todo"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "todos"
        ],
        "summary": "Update a todo",
        "parameters": [
          {
            "description": "body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/handler.UpdateRequestBody"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/handler.ResponseData"
                },
                {
                  "type": "object",
                  "properties": {
                    "Data": {
                      "$ref": "#/definitions/model.Todo"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "todos"
        ],
        "summary": "Delete a todo",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/handler.ResponseError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "model.CreateRequest": {
      "type": "object",
      "required": [
        "task_title", "description", "priority_task", "status"
      ],
      "properties": {
        "task_title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "priority_task": {
          "type": "string",
                    "enum": [
            "high",
            "medium",
            "low",
          ]
        },
        "status": {
          "$ref": "#/definitions/model.Status"
        }
      }
    },
    "handler.Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "handler.ResponseData": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data is the response data."
        }
      }
    },
    "handler.ResponseError": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors is the response errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/handler.Error"
          }
        }
      }
    },
    "handler.UpdateRequestBody": {
      "type": "object",
      "properties": {
        "task_title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "priority_task": {
          "type": "string",
          "enum": [
            "high",
            "medium",
            "low",
          ]
        },
        "status": {
          "$ref": "#/definitions/model.Status"
        }
      }
    },
    "model.Status": {
      "type": "string",
      "enum": [
        "to-do",
        "in-progress",
        "completed",
      ]
    },
    "model.Todo": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer"
        },
        "TaskTitle": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "PriorityTask": {
          "type": "string"
        },
        "Priority":{
         "type": "integer"
         },
        "Status": {
          "$ref": "#/definitions/model.Status"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}
`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "fullstack-examination-2024 API",
	Description:      "This is a server for fullstack-examination-2024.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
